CredentialService 设计

CredentialService 用于给整个系统提供密钥，包括永久密钥和临时密钥，内部维护

- 保存永久密钥；
- 保存小程序登录态，并将其换为 CAM 临时秘钥


接口设计：


// 永久密钥登录态
class ForeverToken {

    String secretId;
    String secretKey;
}

// 小程序登录态，可以用来换取 CAM 临时密钥
class MiniProgramToken {

    String uin;
    String skey;
}


class COSBrowserCredentialProvider extends BasicLifecycleCredentialProvider {

    /**
     * 小程序登录态；
     *
     * 用户每次通过小程序登录后会刷新小程序登录态，可以用这个小程序登录态去换取 CAM 临时密钥（不持久化临时密钥），
     * 这个登录态需要持久化缓存到本地，CAM 临时密钥不存在或者过期后，需要重新拉取。
     *
     * 如果小程序登录态失效，那么需要用户重新登录。
     */
    private MiniProgramToken miniProgramToken;

	  /**
	   * 永久密钥登录态；
	   *
	   * 若用户最近的一次登录通过永久密钥登录，则客户端通过永久密钥来生成临时密钥。
	   */
    private COSForeverCredential foreverCredential;

    /**
     * 用于将登录态换成临时密钥。
     */
    private CredentialFetcher credentialFetcher;



    /**
     * 刷新小程序登录态；
     *
     * 小程序的登录态最多只有两天有效，用户重新通过小程序登录后需要重新将小程序登录态。
     */
    public void refreshMiniProgramToken(MiniProgramToken miniProgramToken);

    /**
     * 刷新永久密钥登录态；
     *
     * 用户通过永久密钥登录时，刷新永久密钥登录态。
     */
    public void refreshForeverToken(ForeverToken ForeverToken);

    /**
     * 初始化；
     *
     * app 启动后，会自动调用 init() 方法来初始化，主要包括：
     *
     * 1、查看是否缓存了永久密钥，如果客户端缓存了永久密钥，则直接使用永久密钥登录态；
     * 2、查看是否缓存了小程序登录态，如果缓存了，则直接使用小程序登录态；
     * 3、如果都没有，则直接跳转到登录页面。
     */
    private void init();

    protected QCloudLifecycleCredentials fetchNewCredentials() throws QCloudClientException {

        return credentialFetcher.fetchNewCredentials();
    }

}


interface CredentialFetcher {

    QCloudLifecycleCredentials fetchNewCredentials() throws QCloudClientException
}

// 将永久密钥登录态换成临时密钥
class ForeverCredentialFetcher implements CredentialFetcher {

}

// 将小程序登录态换成临时密钥
class MiniProgramCredentialFetcher implements CredentialFetcher {

}

CredentialService 设计

- 客户端实际都是通过临时密钥去加密请求，如果用户是通过永久密钥登录，也会先将永久密钥转化为临时密钥，然后加密；
- 抽象密钥的获取过程，可以是从数据库中加载、SharedPreference 中加载，或者用小程序的登录态去换等等方式；
